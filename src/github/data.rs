use serde::{Deserialize, Serialize};

#[derive(Deserialize, Serialize, Debug)]
pub struct User {
    email: String,
    login: String,
    name: String,
    organizations_url: String,
    repos_url: String,
    starred_url: String,
    subscriptions_url: String,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Repository {
    id: i64,
    name: String,
    full_name: String,
    private: bool,
    html_url: String,
    description: Option<String>,
    fork: bool,
    url: String,
    archive_url: String,
    assignees_url: String,
    blobs_url: String,
    branches_url: String,
    collaborators_url: String,
    comments_url: String,
    commits_url: String,
    compare_url: String,
    contents_url: String,
    contributors_url: String,
    deployments_url: String,
    downloads_url: String,
    events_url: String,
    forks_url: String,
    git_commits_url: String,
    git_refs_url: String,
    git_tags_url: String,
    git_url: String,
    issue_comment_url: String,
    issue_events_url: String,
    issues_url: String,
    keys_url: String,
    labels_url: String,
    languages_url: String,
    merges_url: String,
    milestones_url: String,
    notifications_url: String,
    pulls_url: String,
    releases_url: String,
    ssh_url: String,
    stargazers_url: String,
    statuses_url: String,
    subscribers_url: String,
    subscription_url: String,
    tags_url: String,
    teams_url: String,
    trees_url: String,
    clone_url: String,
    mirror_url: Option<String>,
    hooks_url: String,
    svn_url: String,
    homepage: Option<String>,
    language: Option<serde_json::Value>,
    forks_count: i64,
    forks: i64,
    stargazers_count: i64,
    watchers_count: i64,
    watchers: i64,
    size: i64,
    default_branch: String,
    open_issues_count: i64,
    open_issues: i64,
    is_template: bool,
    topics: Vec<String>,
    has_issues: bool,
    has_projects: bool,
    has_wiki: bool,
    has_pages: bool,
    has_downloads: bool,
    has_discussions: bool,
    archived: bool,
    disabled: bool,
    visibility: String,
    pushed_at: String,
    created_at: String,
    updated_at: String,
    permissions: Permissions,
    allow_rebase_merge: Option<bool>,
    temp_clone_token: Option<String>,
    allow_squash_merge: Option<bool>,
    allow_auto_merge: Option<bool>,
    delete_branch_on_merge: Option<bool>,
    allow_merge_commit: Option<bool>,
    subscribers_count: Option<i64>,
    network_count: Option<i64>,
    license: Option<License>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct License {
    key: String,
    name: String,
    spdx_id: String,
    url: String,
    node_id: String,
    html_url: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Permissions {
    pull: bool,
    push: bool,
    admin: bool,
}

#[derive(Deserialize, Serialize, Debug)]
pub struct Organization {
    login: String,
    id: i64,
    node_id: String,
    url: String,
    repos_url: String,
    events_url: String,
    hooks_url: String,
    issues_url: String,
    members_url: String,
    public_members_url: String,
    avatar_url: String,
    description: String,
    name: String,
    company: String,
    blog: String,
    location: String,
    email: String,
    twitter_username: String,
    is_verified: bool,
    has_organization_projects: bool,
    has_repository_projects: bool,
    public_repos: i64,
    public_gists: i64,
    followers: i64,
    following: i64,
    html_url: String,
    created_at: String,
    updated_at: String,
    organization_type: String,
    total_private_repos: i64,
    owned_private_repos: i64,
    private_gists: i64,
    disk_usage: i64,
    collaborators: i64,
    billing_email: String,
    plan: Plan,
    default_repository_permission: String,
    members_can_create_repositories: bool,
    two_factor_requirement_enabled: bool,
    members_allowed_repository_creation_type: String,
    members_can_create_public_repositories: bool,
    members_can_create_private_repositories: bool,
    members_can_create_internal_repositories: bool,
    members_can_create_pages: bool,
    members_can_fork_private_repositories: bool,
}

#[derive(Deserialize, Serialize, Debug)]
pub struct Plan {
    name: String,
    space: i64,
    private_repos: i64,
    filled_seats: i64,
    seats: i64,
}
